#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

// 解析环境变量
$conf_file = '/usr/local/etc/nginx/cron.conf'; // 上线需要改
//$conf_file = '/data1/xinsrv/nginx/conf/fastcgi_web';
if(file_exists($conf_file)) {
    $conf = parse_ini_file($conf_file);
    foreach($conf as $k => $v) {
    	if(strpos($v, '$server_name') === false) {
    		$_SERVER[$k] = $v;
	    } else {
            $_SERVER[$k] = str_replace('$server_name', 'wzj.wuliu.com', $v);
        }
    }
    unset($conf, $k, $v);
}
unset($conf_file);
isset($_SERVER['HTTP_HOST']) ||
($_SERVER['HTTP_HOST'] = isset($_SERVER['SITE_ENV']) && $_SERVER['SITE_ENV'] == 'production' ? 'wzj.wuliu.com' : 'wzj.test.wuliu.com');

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
